[
  {
    "objectID": "basic-python-intro (2).html",
    "href": "basic-python-intro (2).html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic-python-intro (2).html#what-is-python",
    "href": "basic-python-intro (2).html#what-is-python",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic-python-intro (2).html#variables-and-data-types",
    "href": "basic-python-intro (2).html#variables-and-data-types",
    "title": "Introduction to Python",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "basic-python-intro (2).html#control-structures",
    "href": "basic-python-intro (2).html#control-structures",
    "title": "Introduction to Python",
    "section": "Control Structures",
    "text": "Control Structures\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "basic-python-intro (2).html#functions",
    "href": "basic-python-intro (2).html#functions",
    "title": "Introduction to Python",
    "section": "Functions",
    "text": "Functions\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "basic-python-intro (2).html#lists-and-dictionaries",
    "href": "basic-python-intro (2).html#lists-and-dictionaries",
    "title": "Introduction to Python",
    "section": "Lists and Dictionaries",
    "text": "Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "basic-python-intro.html",
    "href": "basic-python-intro.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic-python-intro.html#what-is-python",
    "href": "basic-python-intro.html#what-is-python",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic-python-intro.html#variables-and-data-types",
    "href": "basic-python-intro.html#variables-and-data-types",
    "title": "Introduction to Python",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "basic-python-intro.html#control-structures",
    "href": "basic-python-intro.html#control-structures",
    "title": "Introduction to Python",
    "section": "Control Structures",
    "text": "Control Structures\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "basic-python-intro.html#functions",
    "href": "basic-python-intro.html#functions",
    "title": "Introduction to Python",
    "section": "Functions",
    "text": "Functions\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "basic-python-intro.html#lists-and-dictionaries",
    "href": "basic-python-intro.html#lists-and-dictionaries",
    "title": "Introduction to Python",
    "section": "Lists and Dictionaries",
    "text": "Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "basic_python_intro.html",
    "href": "basic_python_intro.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic_python_intro.html#what-is-python",
    "href": "basic_python_intro.html#what-is-python",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic_python_intro.html#variables-and-data-types",
    "href": "basic_python_intro.html#variables-and-data-types",
    "title": "Introduction to Python",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "basic_python_intro.html#control-structures",
    "href": "basic_python_intro.html#control-structures",
    "title": "Introduction to Python",
    "section": "Control Structures",
    "text": "Control Structures\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "basic_python_intro.html#functions",
    "href": "basic_python_intro.html#functions",
    "title": "Introduction to Python",
    "section": "Functions",
    "text": "Functions\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "basic_python_intro.html#lists-and-dictionaries",
    "href": "basic_python_intro.html#lists-and-dictionaries",
    "title": "Introduction to Python",
    "section": "Lists and Dictionaries",
    "text": "Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "basic_python_intro2.html",
    "href": "basic_python_intro2.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic_python_intro2.html#what-is-python",
    "href": "basic_python_intro2.html#what-is-python",
    "title": "Introduction to Python",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "basic_python_intro2.html#variables-and-data-types",
    "href": "basic_python_intro2.html#variables-and-data-types",
    "title": "Introduction to Python",
    "section": "Variables and Data Types",
    "text": "Variables and Data Types\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "basic_python_intro2.html#control-structures",
    "href": "basic_python_intro2.html#control-structures",
    "title": "Introduction to Python",
    "section": "Control Structures",
    "text": "Control Structures\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "basic_python_intro2.html#functions",
    "href": "basic_python_intro2.html#functions",
    "title": "Introduction to Python",
    "section": "Functions",
    "text": "Functions\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "basic_python_intro2.html#lists-and-dictionaries",
    "href": "basic_python_intro2.html#lists-and-dictionaries",
    "title": "Introduction to Python",
    "section": "Lists and Dictionaries",
    "text": "Lists and Dictionaries\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "beer-markets.html",
    "href": "beer-markets.html",
    "title": "Beer Markets - ipynb",
    "section": "",
    "text": "Let’s analyze the beer_data data:\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reading the CSV file\nbeer_data = pd.read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")\n\n# Setting up the visualisation settings\nsns.set(style=\"whitegrid\")\n\n# Calculate total quantity and spending for each brand\nbrand_summary = beer_data.groupby('brand').agg({'quantity':'sum', 'dollar_spent':'sum'}).reset_index()\n\n# Sort by total quantity and spending\nbrand_summary_sorted_quantity = brand_summary.sort_values('quantity', ascending=False)\nbrand_summary_sorted_spent = brand_summary.sort_values('dollar_spent', ascending=False)\n# Plotting total quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=brand_summary_sorted_quantity, palette='viridis')\nplt.title('Total Quantity of Beer Purchased by Brand')\nplt.xlabel('Total Quantity')\nplt.ylabel('Brand')\nplt.show()\nThe bar charts above display the total quantity of beer purchased and the total spending by brand. From the looks of it, certain brands dominate in terms of quantity sold and total spending, indicating their popularity.\nNow, let’s calculate the average quantity purchased and average spending per purchase. For this, we’ll consider each row in the dataset as a separate purchase and compute the averages accordingly.\n# Calculate average quantity purchased and average spending per purchase\naverage_purchase = beer_data.groupby('brand').agg({\n    'quantity': 'mean', \n    'dollar_spent': 'mean'\n}).reset_index()\n\n# Sort by average quantity and average spending\naverage_purchase_sorted_quantity = average_purchase.sort_values('quantity', ascending=False)\naverage_purchase_sorted_spent = average_purchase.sort_values('dollar_spent', ascending=False)\n\n# Plotting average quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=average_purchase_sorted_quantity, palette='viridis')\nplt.title('Average Quantity of Beer Purchased by Brand')\nplt.xlabel('Average Quantity')\nplt.ylabel('Brand')\nplt.show()\nThe visualizations above depict the average quantity of beer purchased per brand and the average spending per brand. This shows which brands tend to be bought in larger quantities on average and which brands tend to have higher spending per purchase, which could be indicative of their price point or the purchase of premium products.\nNext, we’ll look at the total spending across different markets to see if there are any notable differences in spending habits geographically. To do this, we’ll sum up the spending in each market and visualize it.\n# Calculate total spending in each market\nmarket_spending_summary = beer_data.groupby('market').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nmarket_spending_summary_sorted = market_spending_summary.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending in each market\nplt.figure(figsize=(12, 18))\nsns.barplot(x='dollar_spent', y='market', data=market_spending_summary_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Market')\nplt.xlabel('Total Spending')\nplt.ylabel('Market')\nplt.show()\nThe bar chart illustrates the total spending on beer by market, showcasing the differences in spending habits across various regions. Some markets have significantly higher spending, which could be due to a variety of factors including market size, consumer preferences, or economic factors.\nNow, let’s move on to the second analysis:"
  },
  {
    "objectID": "beer-markets.html#demographic-analysis",
    "href": "beer-markets.html#demographic-analysis",
    "title": "Beer Markets - ipynb",
    "section": "Demographic Analysis",
    "text": "Demographic Analysis\nWe will examine which demographics are buying what kind of beer and whether spending habits vary by demographics such as age, employment, and race. For this, we could look at:\n\nSpending by age group\nSpending by employment status\nSpending by race\n\nI’ll start by analyzing spending by age group.\n\n# Calculate total spending by age group\nage_group_spending = beer_data.groupby('age').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nage_group_spending_sorted = age_group_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by age group\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='age', data=age_group_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Age Group')\nplt.xlabel('Total Spending')\nplt.ylabel('Age Group')\nplt.show()\n\n\n\n\nThe bar chart demonstrates the total spending on beer segmented by age group, highlighting which age groups spend the most on beer. It appears that certain age groups are more dominant in beer spending, which may align with the purchasing power or preferences of those groups.\nNext, we will examine spending by employment status.\n\n# Calculate total spending by employment status\nemployment_spending = beer_data.groupby('employment').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nemployment_spending_sorted = employment_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by employment status\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='employment', data=employment_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Employment Status')\nplt.xlabel('Total Spending')\nplt.ylabel('Employment Status')\nplt.show()\n\n\n\n\nThe visualization shows the total spending on beer by employment status. We can see that certain employment groups, such as full-time workers, are spending more on beer, which might be related to their disposable income.\nFinally, let’s look at spending by race to complete the demographic analysis.\n\n# Calculate total spending by race\nrace_spending = beer_data.groupby('race').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nrace_spending_sorted = race_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by race\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='race', data=race_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Race')\nplt.xlabel('Total Spending')\nplt.ylabel('Race')\nplt.show()\n\n\n\n\nThe bar chart above indicates the total spending on beer broken down by race, highlighting which racial groups account for the most beer spending within the dataset. This could reflect both the demographics of the regions where the data was collected and cultural preferences regarding beer.\nNow, let’s proceed to the third analysis:"
  },
  {
    "objectID": "beer-markets.html#price-sensitivity",
    "href": "beer-markets.html#price-sensitivity",
    "title": "Beer Markets - ipynb",
    "section": "Price Sensitivity",
    "text": "Price Sensitivity\nWe’ll look at the price per fluid ounce and see if there are any trends or correlations with the quantity purchased or the brand popularity. To do this, we’ll calculate the average price per fluid ounce for each brand and then visualize how this relates to the average quantity purchased and the total quantity purchased by brand.\nFirst, let’s calculate the average price per fluid ounce for each brand.\n\n# Calculate average price per fluid ounce for each brand\nbrand_price_sensitivity = beer_data.groupby('brand').agg({\n    'price_per_floz': 'mean', \n    'quantity': 'sum'\n}).reset_index()\n\n# Sort by price per fluid ounce\nbrand_price_sensitivity_sorted = brand_price_sensitivity.sort_values('price_per_floz', ascending=True)\n\n# Plotting average price per fluid ounce for each brand and the total quantity purchased\nfig, ax1 = plt.subplots(figsize=(12, 10))\n\ncolor = 'tab:red'\nax1.set_xlabel('Brand')\nax1.set_ylabel('Average Price per Fluid Ounce', color=color)\nax1.bar(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['price_per_floz'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\nax1.set_xticklabels(brand_price_sensitivity_sorted['brand'], rotation=90)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:blue'\nax2.set_ylabel('Total Quantity Purchased', color=color)  # we already handled the x-label with ax1\nax2.plot(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['quantity'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.title('Average Price per Fluid Ounce & Total Quantity Purchased by Brand')\nplt.show()\n\n\n\n\nIn the visualization, we have a bar graph showing the average price per fluid ounce for each brand (in red) and a line graph showing the total quantity purchased for each brand (in blue). This gives us a sense of whether there’s a relationship between the price and the quantity purchased. The x-axis labels are quite compressed due to the number of brands, but we can still observe trends such as whether lower-priced beers tend to be purchased in larger quantities.\nLastly, let’s move to the fourth analysis:"
  },
  {
    "objectID": "beer-markets.html#promotional-impact",
    "href": "beer-markets.html#promotional-impact",
    "title": "Beer Markets - ipynb",
    "section": "Promotional Impact",
    "text": "Promotional Impact\nWe’ll assess the impact of promotions on the quantity of beer purchased. For this analysis, we can calculate the average quantity purchased with and without promotions and visualize the difference. We’ll do this for each brand to see which brands are most affected by promotions.\nLet’s begin this analysis by looking at the average quantity purchased with and without promotions for each brand.\n\n# Calculate average quantity purchased with and without promotions for each brand\npromo_impact = beer_data.groupby(['brand', 'promo']).agg({'quantity':'mean'}).reset_index()\n\n# Pivot the data to have promo and non-promo side by side for each brand\npromo_impact_pivot = promo_impact.pivot(index='brand', columns='promo', values='quantity').reset_index()\npromo_impact_pivot.columns = ['brand', 'non_promo', 'promo']\n\n# Calculate the difference in average quantity purchased between promo and non-promo\npromo_impact_pivot['promo_impact'] = promo_impact_pivot['promo'] - promo_impact_pivot['non_promo']\n\n# Sort by the impact of promo\npromo_impact_pivot_sorted = promo_impact_pivot.sort_values('promo_impact', ascending=False)\n\n# Plotting the difference in average quantity purchased between promo and non-promo for each brand\nplt.figure(figsize=(12, 10))\nsns.barplot(x='promo_impact', y='brand', data=promo_impact_pivot_sorted, palette='viridis')\nplt.title('Impact of Promotions on Average Quantity Purchased by Brand')\nplt.xlabel('Difference in Average Quantity Purchased (Promo - Non-Promo)')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar chart illustrates the impact of promotions on the average quantity of beer purchased by brand. A positive value indicates that, on average, more beer is purchased when there is a promotion compared to when there isn’t. Some brands appear to be significantly more influenced by promotions, with customers buying more when the products are on sale or promotion.\nThis comprehensive analysis has provided insights into purchase patterns, demographic preferences, price sensitivity, and the impact of promotions on beer purchases."
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Jordan Alfano Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nSpotify Analysis\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nJordan Alfano\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nJordan Alfano\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nRestaurants\n\n\n\n\n\n\n\n\n\nDec 8, 2023\n\n\nJordan Alfano\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nBeer Markets\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nByeong-Hak Choe\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl_210_project (2).html",
    "href": "danl_210_project (2).html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "Historical Stock\n\n# !pip install google-colab\nimport pandas as pd\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\n\n\nurl = \"https://jca100.github.io/yfinance_history.csv\"\nhistory = pd.read_csv(url)\n\n\nhistory\n\nWarning: total number of rows (197796) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nTicker\nClose\nDividends\nHigh\nLow\nOpen\nStock Splits\nVolume\n\n\n\n\n0\n2023-01-03\nA\n148.716080\n0.0\n151.778826\n147.159941\n150.619151\n0.0\n1414300\n\n\n1\n2023-01-03\nAA\n43.895847\n0.0\n45.953769\n43.757993\n45.067583\n0.0\n2880000\n\n\n2\n2023-01-03\nAAL\n12.740000\n0.0\n13.000000\n12.530000\n12.910000\n0.0\n21865100\n\n\n3\n2023-01-03\nAAP\n147.327972\n0.0\n147.444647\n141.941962\n142.097518\n0.0\n1307400\n\n\n4\n2023-01-03\nAAPL\n124.048042\n0.0\n129.830399\n123.155395\n129.215470\n0.0\n112117500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197791\n2024-03-28\nXYL\n129.240005\n0.0\n130.220001\n129.149994\n129.559998\n0.0\n953200\n\n\n197792\n2024-03-28\nYUM\n138.649994\n0.0\n138.830002\n137.389999\n137.389999\n0.0\n1770900\n\n\n197793\n2024-03-28\nZ\n48.779999\n0.0\n50.730000\n48.700001\n50.169998\n0.0\n4895700\n\n\n197794\n2024-03-28\nZBH\n131.979996\n0.0\n133.899994\n131.600006\n132.929993\n0.0\n1425300\n\n\n197795\n2024-03-28\nZTS\n168.728912\n0.0\n170.653418\n166.934027\n168.250266\n0.0\n3395600\n\n\n\n\n\n197796 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nurl = \"https://jca100.github.io/yfinance_balance_sheet.csv\"\nbalance = pd.read_csv(url)\n\n\nbalance\n\nWarning: Total number of columns (144) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nOrdinary Shares Number\nShare Issued\nNet Debt\nTotal Debt\nTangible Book Value\nInvested Capital\nWorking Capital\nNet Tangible Assets\n...\nTrading Securities\nInvestmentsin Subsidiariesat Cost\nTotal Partnership Capital\nLimited Partnership Capital\nDueto Related Parties Non Current\nDuefrom Related Parties Non Current\nFixed Assets Revaluation Reserve\nCurrent Deferred Taxes Liabilities\nCurrent Deferred Taxes Assets\nGeneral Partnership Capital\n\n\n\n\n0\nA\n2024-01-31\n293041817.0\n293041817.0\n8.070000e+08\n2.555000e+09\n1.778000e+09\n8.743000e+09\n2.721000e+09\n1.778000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n292123241.0\n292123241.0\n1.145000e+09\n2.735000e+09\n1.410000e+09\n8.580000e+09\n2.583000e+09\n1.410000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n292747000.0\n292747000.0\n1.460000e+09\n2.789000e+09\n1.072000e+09\n8.347000e+09\n2.270000e+09\n1.072000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n295000000.0\n295000000.0\n1.558000e+09\n2.733000e+09\n9.800000e+08\n8.514000e+09\n2.283000e+09\n9.800000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n178472464.0\n178472464.0\n1.190000e+09\n2.548000e+09\n3.812000e+09\n6.542000e+09\n1.840000e+09\n3.812000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3070\nZTS\n2024-03-31\n456947205.0\n501891243.0\n4.613000e+09\n6.770000e+09\n1.004000e+09\n1.164400e+10\n4.450000e+09\n1.004000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3071\nZTS\n2023-12-31\n458367358.0\n501891243.0\n4.528000e+09\n6.755000e+09\n9.000000e+08\n1.156400e+10\n4.454000e+09\n9.000000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3072\nZTS\n2023-09-30\n459524713.0\n501891243.0\n4.803000e+09\n6.745000e+09\n9.180000e+08\n1.163200e+10\n4.614000e+09\n9.180000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3073\nZTS\n2023-06-30\n460750652.0\n501891243.0\n4.843000e+09\n6.745000e+09\n6.590000e+08\n1.118200e+10\n4.414000e+09\n6.590000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3074\nZTS\n2023-03-31\n462495343.0\n501891243.0\n4.457000e+09\n6.742000e+09\n4.420000e+08\n1.105600e+10\n4.354000e+09\n4.420000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3075 rows × 144 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\nurl = \"https://jca100.github.io/yfinance_income_stmt.csv\"\nincome = pd.read_csv(url)\n\n\nincome\n\nWarning: Total number of columns (77) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nTax Effect Of Unusual Items\nTax Rate For Calcs\nNormalized EBITDA\nNet Income From Continuing Operation Net Minority Interest\nReconciled Depreciation\nReconciled Cost Of Revenue\nEBITDA\nEBIT\n...\nSalaries And Wages\nTotal Other Finance Cost\nOther Taxes\nProvision For Doubtful Accounts\nDepreciation Income Statement\nInsurance And Claims\nRent And Landing Fees\nExcise Taxes\nDepletion Income Statement\nSecurities Amortization\n\n\n\n\n0\nA\n2024-01-31\n0.000000e+00\n0.136000\n487000000.0\n348000000.0\n62000000.0\n7.500000e+08\n4.870000e+08\n425000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n0.000000e+00\n0.210000\n504000000.0\n475000000.0\n62000000.0\n7.730000e+08\n5.040000e+08\n442000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n0.000000e+00\n0.159000\n227000000.0\n111000000.0\n71000000.0\n1.014000e+09\n2.270000e+08\n156000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n0.000000e+00\n0.199000\n472000000.0\n302000000.0\n71000000.0\n7.930000e+08\n4.720000e+08\n401000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n-1.340308e+07\n0.055385\n105000000.0\n-252000000.0\n161000000.0\n2.404000e+09\n-1.370000e+08\n-298000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3085\nZTS\n2024-03-31\n-4.554000e+06\n0.198000\n954000000.0\n599000000.0\n126000000.0\n5.540000e+08\n9.310000e+08\n805000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3086\nZTS\n2023-12-31\n-6.252308e+06\n0.195385\n867000000.0\n525000000.0\n126000000.0\n6.390000e+08\n8.350000e+08\n709000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3087\nZTS\n2023-09-30\n-7.098000e+06\n0.169000\n942000000.0\n596000000.0\n124000000.0\n5.520000e+08\n9.000000e+08\n776000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3088\nZTS\n2023-06-30\n1.624000e+07\n0.232000\n981000000.0\n671000000.0\n121000000.0\n5.230000e+08\n1.051000e+09\n930000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3089\nZTS\n2023-03-31\n-6.270000e+06\n0.209000\n910000000.0\n552000000.0\n120000000.0\n5.050000e+08\n8.800000e+08\n760000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3090 rows × 77 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWhat is the net income from continuing operation net minority Interest for each company in yfinance history?\n\nprint(history.columns)\n\nIndex(['Date', 'Ticker', 'Close', 'Dividends', 'High', 'Low', 'Open',\n       'Stock Splits', 'Volume'],\n      dtype='object')\n\n\n\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Standardized_Close', hue='Company', kde=True, bins=30)\nplt.title('New minority interest for Finance History')\nplt.xlabel('Standardized Close Price')\nplt.ylabel('Frequency')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nHow does issues shared vary by company for the yfinance balance sheet\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\n\nfirst_close = df.groupby('Company')['Close'].transform('first')\ndf['Close_Relative_First'] = df['Close'] / first_close\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=df, x='Company', y='Close_Relative_First', hue='Company') # Corrected function name\nplt.title('Daily Trend of Close Price Relative to First Date by Company')\nplt.xlabel('Company')\nplt.ylabel('Interest')\nplt.legend(title='Company')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nHow does the recocnciled cost of revenue vary by each company in the yfinance income statement (stock market or how the income statement and balance sheet leads to promonents)\n\nadam plot or mb plot\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Companies', hue='Company', kde=True, bins=30)\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs for the companies')\nplt.legend(title='Company')\nplt.show()\n\nValueError: Could not interpret value `Companies` for `x`. An entry with this name does not appear in `data`.\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 20 + ['B'] * 80,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Company', hue='Company', kde=True, bins=30) # Corrected variable name\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()"
  },
  {
    "objectID": "danl_210_project (5).html",
    "href": "danl_210_project (5).html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "Historical Stock\n\n# !pip install google-colab\nimport pandas as pd\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\n\n\nurl = \"https://jca100.github.io/yfinance_history.csv\"\nhistory = pd.read_csv(url)\n\n\nhistory\n\nWarning: total number of rows (197796) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nTicker\nClose\nDividends\nHigh\nLow\nOpen\nStock Splits\nVolume\n\n\n\n\n0\n2023-01-03\nA\n148.716080\n0.0\n151.778826\n147.159941\n150.619151\n0.0\n1414300\n\n\n1\n2023-01-03\nAA\n43.895847\n0.0\n45.953769\n43.757993\n45.067583\n0.0\n2880000\n\n\n2\n2023-01-03\nAAL\n12.740000\n0.0\n13.000000\n12.530000\n12.910000\n0.0\n21865100\n\n\n3\n2023-01-03\nAAP\n147.327972\n0.0\n147.444647\n141.941962\n142.097518\n0.0\n1307400\n\n\n4\n2023-01-03\nAAPL\n124.048042\n0.0\n129.830399\n123.155395\n129.215470\n0.0\n112117500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197791\n2024-03-28\nXYL\n129.240005\n0.0\n130.220001\n129.149994\n129.559998\n0.0\n953200\n\n\n197792\n2024-03-28\nYUM\n138.649994\n0.0\n138.830002\n137.389999\n137.389999\n0.0\n1770900\n\n\n197793\n2024-03-28\nZ\n48.779999\n0.0\n50.730000\n48.700001\n50.169998\n0.0\n4895700\n\n\n197794\n2024-03-28\nZBH\n131.979996\n0.0\n133.899994\n131.600006\n132.929993\n0.0\n1425300\n\n\n197795\n2024-03-28\nZTS\n168.728912\n0.0\n170.653418\n166.934027\n168.250266\n0.0\n3395600\n\n\n\n\n\n197796 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nurl = \"https://jca100.github.io/yfinance_balance_sheet.csv\"\nbalance = pd.read_csv(url)\n\n\nbalance\n\nWarning: Total number of columns (144) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nOrdinary Shares Number\nShare Issued\nNet Debt\nTotal Debt\nTangible Book Value\nInvested Capital\nWorking Capital\nNet Tangible Assets\n...\nTrading Securities\nInvestmentsin Subsidiariesat Cost\nTotal Partnership Capital\nLimited Partnership Capital\nDueto Related Parties Non Current\nDuefrom Related Parties Non Current\nFixed Assets Revaluation Reserve\nCurrent Deferred Taxes Liabilities\nCurrent Deferred Taxes Assets\nGeneral Partnership Capital\n\n\n\n\n0\nA\n2024-01-31\n293041817.0\n293041817.0\n8.070000e+08\n2.555000e+09\n1.778000e+09\n8.743000e+09\n2.721000e+09\n1.778000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n292123241.0\n292123241.0\n1.145000e+09\n2.735000e+09\n1.410000e+09\n8.580000e+09\n2.583000e+09\n1.410000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n292747000.0\n292747000.0\n1.460000e+09\n2.789000e+09\n1.072000e+09\n8.347000e+09\n2.270000e+09\n1.072000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n295000000.0\n295000000.0\n1.558000e+09\n2.733000e+09\n9.800000e+08\n8.514000e+09\n2.283000e+09\n9.800000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n178472464.0\n178472464.0\n1.190000e+09\n2.548000e+09\n3.812000e+09\n6.542000e+09\n1.840000e+09\n3.812000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3070\nZTS\n2024-03-31\n456947205.0\n501891243.0\n4.613000e+09\n6.770000e+09\n1.004000e+09\n1.164400e+10\n4.450000e+09\n1.004000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3071\nZTS\n2023-12-31\n458367358.0\n501891243.0\n4.528000e+09\n6.755000e+09\n9.000000e+08\n1.156400e+10\n4.454000e+09\n9.000000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3072\nZTS\n2023-09-30\n459524713.0\n501891243.0\n4.803000e+09\n6.745000e+09\n9.180000e+08\n1.163200e+10\n4.614000e+09\n9.180000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3073\nZTS\n2023-06-30\n460750652.0\n501891243.0\n4.843000e+09\n6.745000e+09\n6.590000e+08\n1.118200e+10\n4.414000e+09\n6.590000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3074\nZTS\n2023-03-31\n462495343.0\n501891243.0\n4.457000e+09\n6.742000e+09\n4.420000e+08\n1.105600e+10\n4.354000e+09\n4.420000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3075 rows × 144 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\nurl = \"https://jca100.github.io/yfinance_income_stmt.csv\"\nincome = pd.read_csv(url)\n\n\nincome\n\nWarning: Total number of columns (77) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nTax Effect Of Unusual Items\nTax Rate For Calcs\nNormalized EBITDA\nNet Income From Continuing Operation Net Minority Interest\nReconciled Depreciation\nReconciled Cost Of Revenue\nEBITDA\nEBIT\n...\nSalaries And Wages\nTotal Other Finance Cost\nOther Taxes\nProvision For Doubtful Accounts\nDepreciation Income Statement\nInsurance And Claims\nRent And Landing Fees\nExcise Taxes\nDepletion Income Statement\nSecurities Amortization\n\n\n\n\n0\nA\n2024-01-31\n0.000000e+00\n0.136000\n487000000.0\n348000000.0\n62000000.0\n7.500000e+08\n4.870000e+08\n425000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n0.000000e+00\n0.210000\n504000000.0\n475000000.0\n62000000.0\n7.730000e+08\n5.040000e+08\n442000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n0.000000e+00\n0.159000\n227000000.0\n111000000.0\n71000000.0\n1.014000e+09\n2.270000e+08\n156000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n0.000000e+00\n0.199000\n472000000.0\n302000000.0\n71000000.0\n7.930000e+08\n4.720000e+08\n401000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n-1.340308e+07\n0.055385\n105000000.0\n-252000000.0\n161000000.0\n2.404000e+09\n-1.370000e+08\n-298000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3085\nZTS\n2024-03-31\n-4.554000e+06\n0.198000\n954000000.0\n599000000.0\n126000000.0\n5.540000e+08\n9.310000e+08\n805000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3086\nZTS\n2023-12-31\n-6.252308e+06\n0.195385\n867000000.0\n525000000.0\n126000000.0\n6.390000e+08\n8.350000e+08\n709000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3087\nZTS\n2023-09-30\n-7.098000e+06\n0.169000\n942000000.0\n596000000.0\n124000000.0\n5.520000e+08\n9.000000e+08\n776000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3088\nZTS\n2023-06-30\n1.624000e+07\n0.232000\n981000000.0\n671000000.0\n121000000.0\n5.230000e+08\n1.051000e+09\n930000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3089\nZTS\n2023-03-31\n-6.270000e+06\n0.209000\n910000000.0\n552000000.0\n120000000.0\n5.050000e+08\n8.800000e+08\n760000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3090 rows × 77 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWhat is the net income from continuing operation net minority Interest for each company in yfinance history?\n\nprint(history.columns)\n\nIndex(['Date', 'Ticker', 'Close', 'Dividends', 'High', 'Low', 'Open',\n       'Stock Splits', 'Volume'],\n      dtype='object')\n\n\n\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Standardized_Close', hue='Company', kde=True, bins=30)\nplt.title('New minority interest for Finance History')\nplt.xlabel('Standardized Close Price')\nplt.ylabel('Frequency')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nHow does issues shared vary by company for the yfinance balance sheet\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\n\nfirst_close = df.groupby('Company')['Close'].transform('first')\ndf['Close_Relative_First'] = df['Close'] / first_close\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=df, x='Company', y='Close_Relative_First', hue='Company') # Corrected function name\nplt.title('Daily Trend of Close Price Relative to First Date by Company')\nplt.xlabel('Company')\nplt.ylabel('Interest')\nplt.legend(title='Company')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nHow does the recocnciled cost of revenue vary by each company in the yfinance income statement (stock market or how the income statement and balance sheet leads to promonents)\n\nadam plot or mb plot\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Companies', hue='Company', kde=True, bins=30)\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs for the companies')\nplt.legend(title='Company')\nplt.show()\n\nValueError: Could not interpret value `Companies` for `x`. An entry with this name does not appear in `data`.\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 20 + ['B'] * 80,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Company', hue='Company', kde=True, bins=30) # Corrected variable name\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()"
  },
  {
    "objectID": "danl_210_project (6).html",
    "href": "danl_210_project (6).html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "Historical Stock\n\n# !pip install google-colab\nimport pandas as pd\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\n\n\nurl = \"https://jca100.github.io/yfinance_history.csv\"\nhistory = pd.read_csv(url)\n\n\nhistory\n\nWarning: total number of rows (197796) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nTicker\nClose\nDividends\nHigh\nLow\nOpen\nStock Splits\nVolume\n\n\n\n\n0\n2023-01-03\nA\n148.716080\n0.0\n151.778826\n147.159941\n150.619151\n0.0\n1414300\n\n\n1\n2023-01-03\nAA\n43.895847\n0.0\n45.953769\n43.757993\n45.067583\n0.0\n2880000\n\n\n2\n2023-01-03\nAAL\n12.740000\n0.0\n13.000000\n12.530000\n12.910000\n0.0\n21865100\n\n\n3\n2023-01-03\nAAP\n147.327972\n0.0\n147.444647\n141.941962\n142.097518\n0.0\n1307400\n\n\n4\n2023-01-03\nAAPL\n124.048042\n0.0\n129.830399\n123.155395\n129.215470\n0.0\n112117500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197791\n2024-03-28\nXYL\n129.240005\n0.0\n130.220001\n129.149994\n129.559998\n0.0\n953200\n\n\n197792\n2024-03-28\nYUM\n138.649994\n0.0\n138.830002\n137.389999\n137.389999\n0.0\n1770900\n\n\n197793\n2024-03-28\nZ\n48.779999\n0.0\n50.730000\n48.700001\n50.169998\n0.0\n4895700\n\n\n197794\n2024-03-28\nZBH\n131.979996\n0.0\n133.899994\n131.600006\n132.929993\n0.0\n1425300\n\n\n197795\n2024-03-28\nZTS\n168.728912\n0.0\n170.653418\n166.934027\n168.250266\n0.0\n3395600\n\n\n\n\n\n197796 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nurl = \"https://jca100.github.io/yfinance_balance_sheet.csv\"\nbalance = pd.read_csv(url)\n\n\nbalance\n\nWarning: Total number of columns (144) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nOrdinary Shares Number\nShare Issued\nNet Debt\nTotal Debt\nTangible Book Value\nInvested Capital\nWorking Capital\nNet Tangible Assets\n...\nTrading Securities\nInvestmentsin Subsidiariesat Cost\nTotal Partnership Capital\nLimited Partnership Capital\nDueto Related Parties Non Current\nDuefrom Related Parties Non Current\nFixed Assets Revaluation Reserve\nCurrent Deferred Taxes Liabilities\nCurrent Deferred Taxes Assets\nGeneral Partnership Capital\n\n\n\n\n0\nA\n2024-01-31\n293041817.0\n293041817.0\n8.070000e+08\n2.555000e+09\n1.778000e+09\n8.743000e+09\n2.721000e+09\n1.778000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n292123241.0\n292123241.0\n1.145000e+09\n2.735000e+09\n1.410000e+09\n8.580000e+09\n2.583000e+09\n1.410000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n292747000.0\n292747000.0\n1.460000e+09\n2.789000e+09\n1.072000e+09\n8.347000e+09\n2.270000e+09\n1.072000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n295000000.0\n295000000.0\n1.558000e+09\n2.733000e+09\n9.800000e+08\n8.514000e+09\n2.283000e+09\n9.800000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n178472464.0\n178472464.0\n1.190000e+09\n2.548000e+09\n3.812000e+09\n6.542000e+09\n1.840000e+09\n3.812000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3070\nZTS\n2024-03-31\n456947205.0\n501891243.0\n4.613000e+09\n6.770000e+09\n1.004000e+09\n1.164400e+10\n4.450000e+09\n1.004000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3071\nZTS\n2023-12-31\n458367358.0\n501891243.0\n4.528000e+09\n6.755000e+09\n9.000000e+08\n1.156400e+10\n4.454000e+09\n9.000000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3072\nZTS\n2023-09-30\n459524713.0\n501891243.0\n4.803000e+09\n6.745000e+09\n9.180000e+08\n1.163200e+10\n4.614000e+09\n9.180000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3073\nZTS\n2023-06-30\n460750652.0\n501891243.0\n4.843000e+09\n6.745000e+09\n6.590000e+08\n1.118200e+10\n4.414000e+09\n6.590000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3074\nZTS\n2023-03-31\n462495343.0\n501891243.0\n4.457000e+09\n6.742000e+09\n4.420000e+08\n1.105600e+10\n4.354000e+09\n4.420000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3075 rows × 144 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\nurl = \"https://jca100.github.io/yfinance_income_stmt.csv\"\nincome = pd.read_csv(url)\n\n\nincome\n\nWarning: Total number of columns (77) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nTax Effect Of Unusual Items\nTax Rate For Calcs\nNormalized EBITDA\nNet Income From Continuing Operation Net Minority Interest\nReconciled Depreciation\nReconciled Cost Of Revenue\nEBITDA\nEBIT\n...\nSalaries And Wages\nTotal Other Finance Cost\nOther Taxes\nProvision For Doubtful Accounts\nDepreciation Income Statement\nInsurance And Claims\nRent And Landing Fees\nExcise Taxes\nDepletion Income Statement\nSecurities Amortization\n\n\n\n\n0\nA\n2024-01-31\n0.000000e+00\n0.136000\n487000000.0\n348000000.0\n62000000.0\n7.500000e+08\n4.870000e+08\n425000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n0.000000e+00\n0.210000\n504000000.0\n475000000.0\n62000000.0\n7.730000e+08\n5.040000e+08\n442000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n0.000000e+00\n0.159000\n227000000.0\n111000000.0\n71000000.0\n1.014000e+09\n2.270000e+08\n156000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n0.000000e+00\n0.199000\n472000000.0\n302000000.0\n71000000.0\n7.930000e+08\n4.720000e+08\n401000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n-1.340308e+07\n0.055385\n105000000.0\n-252000000.0\n161000000.0\n2.404000e+09\n-1.370000e+08\n-298000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3085\nZTS\n2024-03-31\n-4.554000e+06\n0.198000\n954000000.0\n599000000.0\n126000000.0\n5.540000e+08\n9.310000e+08\n805000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3086\nZTS\n2023-12-31\n-6.252308e+06\n0.195385\n867000000.0\n525000000.0\n126000000.0\n6.390000e+08\n8.350000e+08\n709000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3087\nZTS\n2023-09-30\n-7.098000e+06\n0.169000\n942000000.0\n596000000.0\n124000000.0\n5.520000e+08\n9.000000e+08\n776000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3088\nZTS\n2023-06-30\n1.624000e+07\n0.232000\n981000000.0\n671000000.0\n121000000.0\n5.230000e+08\n1.051000e+09\n930000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3089\nZTS\n2023-03-31\n-6.270000e+06\n0.209000\n910000000.0\n552000000.0\n120000000.0\n5.050000e+08\n8.800000e+08\n760000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3090 rows × 77 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWhat is the net income from continuing operation net minority Interest for each company in yfinance history?\n\nprint(history.columns)\n\nIndex(['Date', 'Ticker', 'Close', 'Dividends', 'High', 'Low', 'Open',\n       'Stock Splits', 'Volume'],\n      dtype='object')\n\n\n\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Standardized_Close', hue='Company', kde=True, bins=30)\nplt.title('New minority interest for Finance History')\nplt.xlabel('Standardized Close Price')\nplt.ylabel('Frequency')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nHow does issues shared vary by company for the yfinance balance sheet\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\n\nfirst_close = df.groupby('Company')['Close'].transform('first')\ndf['Close_Relative_First'] = df['Close'] / first_close\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=df, x='Company', y='Close_Relative_First', hue='Company') # Corrected function name\nplt.title('Daily Trend of Close Price Relative to First Date by Company')\nplt.xlabel('Company')\nplt.ylabel('Interest')\nplt.legend(title='Company')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nHow does the recocnciled cost of revenue vary by each company in the yfinance income statement (stock market or how the income statement and balance sheet leads to promonents)\n\nadam plot or mb plot\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Companies', hue='Company', kde=True, bins=30)\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs for the companies')\nplt.legend(title='Company')\nplt.show()\n\nValueError: Could not interpret value `Companies` for `x`. An entry with this name does not appear in `data`.\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 20 + ['B'] * 80,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Company', hue='Company', kde=True, bins=30) # Corrected variable name\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nAccountants use the balance sheet, income statement and many other financial aspects as shown in these data frames that were scraped.\nthe sources tht were used were chat GDP and I also worked with Nada on this project.\nComparing the companies and their values,\nthere is an increse in the history and an increase in numbers in the balance sheet as the increase in the reputation and years for the company that it has."
  },
  {
    "objectID": "danl_210_project (7).html",
    "href": "danl_210_project (7).html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "Historical Stock\n\n# !pip install google-colab\nimport pandas as pd\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\n\n\nurl = \"https://jca100.github.io/yfinance_history.csv\"\nhistory = pd.read_csv(url)\n\n\nhistory\n\nWarning: total number of rows (197796) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nTicker\nClose\nDividends\nHigh\nLow\nOpen\nStock Splits\nVolume\n\n\n\n\n0\n2023-01-03\nA\n148.716080\n0.0\n151.778826\n147.159941\n150.619151\n0.0\n1414300\n\n\n1\n2023-01-03\nAA\n43.895847\n0.0\n45.953769\n43.757993\n45.067583\n0.0\n2880000\n\n\n2\n2023-01-03\nAAL\n12.740000\n0.0\n13.000000\n12.530000\n12.910000\n0.0\n21865100\n\n\n3\n2023-01-03\nAAP\n147.327972\n0.0\n147.444647\n141.941962\n142.097518\n0.0\n1307400\n\n\n4\n2023-01-03\nAAPL\n124.048042\n0.0\n129.830399\n123.155395\n129.215470\n0.0\n112117500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197791\n2024-03-28\nXYL\n129.240005\n0.0\n130.220001\n129.149994\n129.559998\n0.0\n953200\n\n\n197792\n2024-03-28\nYUM\n138.649994\n0.0\n138.830002\n137.389999\n137.389999\n0.0\n1770900\n\n\n197793\n2024-03-28\nZ\n48.779999\n0.0\n50.730000\n48.700001\n50.169998\n0.0\n4895700\n\n\n197794\n2024-03-28\nZBH\n131.979996\n0.0\n133.899994\n131.600006\n132.929993\n0.0\n1425300\n\n\n197795\n2024-03-28\nZTS\n168.728912\n0.0\n170.653418\n166.934027\n168.250266\n0.0\n3395600\n\n\n\n\n\n197796 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nurl = \"https://jca100.github.io/yfinance_balance_sheet.csv\"\nbalance = pd.read_csv(url)\n\n\nbalance\n\nWarning: Total number of columns (144) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nOrdinary Shares Number\nShare Issued\nNet Debt\nTotal Debt\nTangible Book Value\nInvested Capital\nWorking Capital\nNet Tangible Assets\n...\nTrading Securities\nInvestmentsin Subsidiariesat Cost\nTotal Partnership Capital\nLimited Partnership Capital\nDueto Related Parties Non Current\nDuefrom Related Parties Non Current\nFixed Assets Revaluation Reserve\nCurrent Deferred Taxes Liabilities\nCurrent Deferred Taxes Assets\nGeneral Partnership Capital\n\n\n\n\n0\nA\n2024-01-31\n293041817.0\n293041817.0\n8.070000e+08\n2.555000e+09\n1.778000e+09\n8.743000e+09\n2.721000e+09\n1.778000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n292123241.0\n292123241.0\n1.145000e+09\n2.735000e+09\n1.410000e+09\n8.580000e+09\n2.583000e+09\n1.410000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n292747000.0\n292747000.0\n1.460000e+09\n2.789000e+09\n1.072000e+09\n8.347000e+09\n2.270000e+09\n1.072000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n295000000.0\n295000000.0\n1.558000e+09\n2.733000e+09\n9.800000e+08\n8.514000e+09\n2.283000e+09\n9.800000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n178472464.0\n178472464.0\n1.190000e+09\n2.548000e+09\n3.812000e+09\n6.542000e+09\n1.840000e+09\n3.812000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3070\nZTS\n2024-03-31\n456947205.0\n501891243.0\n4.613000e+09\n6.770000e+09\n1.004000e+09\n1.164400e+10\n4.450000e+09\n1.004000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3071\nZTS\n2023-12-31\n458367358.0\n501891243.0\n4.528000e+09\n6.755000e+09\n9.000000e+08\n1.156400e+10\n4.454000e+09\n9.000000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3072\nZTS\n2023-09-30\n459524713.0\n501891243.0\n4.803000e+09\n6.745000e+09\n9.180000e+08\n1.163200e+10\n4.614000e+09\n9.180000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3073\nZTS\n2023-06-30\n460750652.0\n501891243.0\n4.843000e+09\n6.745000e+09\n6.590000e+08\n1.118200e+10\n4.414000e+09\n6.590000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3074\nZTS\n2023-03-31\n462495343.0\n501891243.0\n4.457000e+09\n6.742000e+09\n4.420000e+08\n1.105600e+10\n4.354000e+09\n4.420000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3075 rows × 144 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\nurl = \"https://jca100.github.io/yfinance_income_stmt.csv\"\nincome = pd.read_csv(url)\n\n\nincome\n\nWarning: Total number of columns (77) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nTax Effect Of Unusual Items\nTax Rate For Calcs\nNormalized EBITDA\nNet Income From Continuing Operation Net Minority Interest\nReconciled Depreciation\nReconciled Cost Of Revenue\nEBITDA\nEBIT\n...\nSalaries And Wages\nTotal Other Finance Cost\nOther Taxes\nProvision For Doubtful Accounts\nDepreciation Income Statement\nInsurance And Claims\nRent And Landing Fees\nExcise Taxes\nDepletion Income Statement\nSecurities Amortization\n\n\n\n\n0\nA\n2024-01-31\n0.000000e+00\n0.136000\n487000000.0\n348000000.0\n62000000.0\n7.500000e+08\n4.870000e+08\n425000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n0.000000e+00\n0.210000\n504000000.0\n475000000.0\n62000000.0\n7.730000e+08\n5.040000e+08\n442000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n0.000000e+00\n0.159000\n227000000.0\n111000000.0\n71000000.0\n1.014000e+09\n2.270000e+08\n156000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n0.000000e+00\n0.199000\n472000000.0\n302000000.0\n71000000.0\n7.930000e+08\n4.720000e+08\n401000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n-1.340308e+07\n0.055385\n105000000.0\n-252000000.0\n161000000.0\n2.404000e+09\n-1.370000e+08\n-298000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3085\nZTS\n2024-03-31\n-4.554000e+06\n0.198000\n954000000.0\n599000000.0\n126000000.0\n5.540000e+08\n9.310000e+08\n805000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3086\nZTS\n2023-12-31\n-6.252308e+06\n0.195385\n867000000.0\n525000000.0\n126000000.0\n6.390000e+08\n8.350000e+08\n709000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3087\nZTS\n2023-09-30\n-7.098000e+06\n0.169000\n942000000.0\n596000000.0\n124000000.0\n5.520000e+08\n9.000000e+08\n776000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3088\nZTS\n2023-06-30\n1.624000e+07\n0.232000\n981000000.0\n671000000.0\n121000000.0\n5.230000e+08\n1.051000e+09\n930000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3089\nZTS\n2023-03-31\n-6.270000e+06\n0.209000\n910000000.0\n552000000.0\n120000000.0\n5.050000e+08\n8.800000e+08\n760000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3090 rows × 77 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWhat is the net income from continuing operation net minority Interest for each company in yfinance history?\n\nprint(history.columns)\n\nIndex(['Date', 'Ticker', 'Close', 'Dividends', 'High', 'Low', 'Open',\n       'Stock Splits', 'Volume'],\n      dtype='object')\n\n\n\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Standardized_Close', hue='Company', kde=True, bins=30)\nplt.title('New minority interest for Finance History')\nplt.xlabel('Standardized Close Price')\nplt.ylabel('Frequency')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nHow does issues shared vary by company for the yfinance balance sheet\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\n\nfirst_close = df.groupby('Company')['Close'].transform('first')\ndf['Close_Relative_First'] = df['Close'] / first_close\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=df, x='Company', y='Close_Relative_First', hue='Company') # Corrected function name\nplt.title('Daily Trend of Close Price Relative to First Date by Company')\nplt.xlabel('Company')\nplt.ylabel('Interest')\nplt.legend(title='Company')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nHow does the recocnciled cost of revenue vary by each company in the yfinance income statement (stock market or how the income statement and balance sheet leads to promonents)\n\nadam plot or mb plot\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Companies', hue='Company', kde=True, bins=30)\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs for the companies')\nplt.legend(title='Company')\nplt.show()\n\nValueError: Could not interpret value `Companies` for `x`. An entry with this name does not appear in `data`.\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 20 + ['B'] * 80,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Company', hue='Company', kde=True, bins=30) # Corrected variable name\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nAccountants use the balance sheet, income statement and many other financial aspects as shown in these data frames that were scraped.\nthe sources tht were used were chat GDP and I also worked with Nada on this project.\nComparing the companies and their values,\nthere is an increse in the history and an increase in numbers in the balance sheet as the increase in the reputation and years for the company that it has."
  },
  {
    "objectID": "danl_210_project (8).html",
    "href": "danl_210_project (8).html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "Historical Stock\n\n# !pip install google-colab\nimport pandas as pd\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\n\n\nurl = \"https://jca100.github.io/yfinance_history.csv\"\nhistory = pd.read_csv(url)\n\n\nhistory\n\nWarning: total number of rows (197796) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nTicker\nClose\nDividends\nHigh\nLow\nOpen\nStock Splits\nVolume\n\n\n\n\n0\n2023-01-03\nA\n148.716080\n0.0\n151.778826\n147.159941\n150.619151\n0.0\n1414300\n\n\n1\n2023-01-03\nAA\n43.895847\n0.0\n45.953769\n43.757993\n45.067583\n0.0\n2880000\n\n\n2\n2023-01-03\nAAL\n12.740000\n0.0\n13.000000\n12.530000\n12.910000\n0.0\n21865100\n\n\n3\n2023-01-03\nAAP\n147.327972\n0.0\n147.444647\n141.941962\n142.097518\n0.0\n1307400\n\n\n4\n2023-01-03\nAAPL\n124.048042\n0.0\n129.830399\n123.155395\n129.215470\n0.0\n112117500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197791\n2024-03-28\nXYL\n129.240005\n0.0\n130.220001\n129.149994\n129.559998\n0.0\n953200\n\n\n197792\n2024-03-28\nYUM\n138.649994\n0.0\n138.830002\n137.389999\n137.389999\n0.0\n1770900\n\n\n197793\n2024-03-28\nZ\n48.779999\n0.0\n50.730000\n48.700001\n50.169998\n0.0\n4895700\n\n\n197794\n2024-03-28\nZBH\n131.979996\n0.0\n133.899994\n131.600006\n132.929993\n0.0\n1425300\n\n\n197795\n2024-03-28\nZTS\n168.728912\n0.0\n170.653418\n166.934027\n168.250266\n0.0\n3395600\n\n\n\n\n\n197796 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nurl = \"https://jca100.github.io/yfinance_balance_sheet.csv\"\nbalance = pd.read_csv(url)\n\n\nbalance\n\nWarning: Total number of columns (144) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nOrdinary Shares Number\nShare Issued\nNet Debt\nTotal Debt\nTangible Book Value\nInvested Capital\nWorking Capital\nNet Tangible Assets\n...\nTrading Securities\nInvestmentsin Subsidiariesat Cost\nTotal Partnership Capital\nLimited Partnership Capital\nDueto Related Parties Non Current\nDuefrom Related Parties Non Current\nFixed Assets Revaluation Reserve\nCurrent Deferred Taxes Liabilities\nCurrent Deferred Taxes Assets\nGeneral Partnership Capital\n\n\n\n\n0\nA\n2024-01-31\n293041817.0\n293041817.0\n8.070000e+08\n2.555000e+09\n1.778000e+09\n8.743000e+09\n2.721000e+09\n1.778000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n292123241.0\n292123241.0\n1.145000e+09\n2.735000e+09\n1.410000e+09\n8.580000e+09\n2.583000e+09\n1.410000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n292747000.0\n292747000.0\n1.460000e+09\n2.789000e+09\n1.072000e+09\n8.347000e+09\n2.270000e+09\n1.072000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n295000000.0\n295000000.0\n1.558000e+09\n2.733000e+09\n9.800000e+08\n8.514000e+09\n2.283000e+09\n9.800000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n178472464.0\n178472464.0\n1.190000e+09\n2.548000e+09\n3.812000e+09\n6.542000e+09\n1.840000e+09\n3.812000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3070\nZTS\n2024-03-31\n456947205.0\n501891243.0\n4.613000e+09\n6.770000e+09\n1.004000e+09\n1.164400e+10\n4.450000e+09\n1.004000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3071\nZTS\n2023-12-31\n458367358.0\n501891243.0\n4.528000e+09\n6.755000e+09\n9.000000e+08\n1.156400e+10\n4.454000e+09\n9.000000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3072\nZTS\n2023-09-30\n459524713.0\n501891243.0\n4.803000e+09\n6.745000e+09\n9.180000e+08\n1.163200e+10\n4.614000e+09\n9.180000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3073\nZTS\n2023-06-30\n460750652.0\n501891243.0\n4.843000e+09\n6.745000e+09\n6.590000e+08\n1.118200e+10\n4.414000e+09\n6.590000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3074\nZTS\n2023-03-31\n462495343.0\n501891243.0\n4.457000e+09\n6.742000e+09\n4.420000e+08\n1.105600e+10\n4.354000e+09\n4.420000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3075 rows × 144 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\nurl = \"https://jca100.github.io/yfinance_income_stmt.csv\"\nincome = pd.read_csv(url)\n\n\nincome\n\nWarning: Total number of columns (77) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nTax Effect Of Unusual Items\nTax Rate For Calcs\nNormalized EBITDA\nNet Income From Continuing Operation Net Minority Interest\nReconciled Depreciation\nReconciled Cost Of Revenue\nEBITDA\nEBIT\n...\nSalaries And Wages\nTotal Other Finance Cost\nOther Taxes\nProvision For Doubtful Accounts\nDepreciation Income Statement\nInsurance And Claims\nRent And Landing Fees\nExcise Taxes\nDepletion Income Statement\nSecurities Amortization\n\n\n\n\n0\nA\n2024-01-31\n0.000000e+00\n0.136000\n487000000.0\n348000000.0\n62000000.0\n7.500000e+08\n4.870000e+08\n425000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n0.000000e+00\n0.210000\n504000000.0\n475000000.0\n62000000.0\n7.730000e+08\n5.040000e+08\n442000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n0.000000e+00\n0.159000\n227000000.0\n111000000.0\n71000000.0\n1.014000e+09\n2.270000e+08\n156000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n0.000000e+00\n0.199000\n472000000.0\n302000000.0\n71000000.0\n7.930000e+08\n4.720000e+08\n401000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n-1.340308e+07\n0.055385\n105000000.0\n-252000000.0\n161000000.0\n2.404000e+09\n-1.370000e+08\n-298000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3085\nZTS\n2024-03-31\n-4.554000e+06\n0.198000\n954000000.0\n599000000.0\n126000000.0\n5.540000e+08\n9.310000e+08\n805000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3086\nZTS\n2023-12-31\n-6.252308e+06\n0.195385\n867000000.0\n525000000.0\n126000000.0\n6.390000e+08\n8.350000e+08\n709000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3087\nZTS\n2023-09-30\n-7.098000e+06\n0.169000\n942000000.0\n596000000.0\n124000000.0\n5.520000e+08\n9.000000e+08\n776000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3088\nZTS\n2023-06-30\n1.624000e+07\n0.232000\n981000000.0\n671000000.0\n121000000.0\n5.230000e+08\n1.051000e+09\n930000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3089\nZTS\n2023-03-31\n-6.270000e+06\n0.209000\n910000000.0\n552000000.0\n120000000.0\n5.050000e+08\n8.800000e+08\n760000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3090 rows × 77 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWhat is the net income from continuing operation net minority Interest for each company in yfinance history?\n\nprint(history.columns)\n\nIndex(['Date', 'Ticker', 'Close', 'Dividends', 'High', 'Low', 'Open',\n       'Stock Splits', 'Volume'],\n      dtype='object')\n\n\n\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Standardized_Close', hue='Company', kde=True, bins=30)\nplt.title('New minority interest for Finance History')\nplt.xlabel('Standardized Close Price')\nplt.ylabel('Frequency')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nHow does issues shared vary by company for the yfinance balance sheet\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\n\nfirst_close = df.groupby('Company')['Close'].transform('first')\ndf['Close_Relative_First'] = df['Close'] / first_close\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=df, x='Company', y='Close_Relative_First', hue='Company') # Corrected function name\nplt.title('Daily Trend of Close Price Relative to First Date by Company')\nplt.xlabel('Company')\nplt.ylabel('Interest')\nplt.legend(title='Company')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nHow does the recocnciled cost of revenue vary by each company in the yfinance income statement (stock market or how the income statement and balance sheet leads to promonents)\n\nadam plot or mb plot\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Companies', hue='Company', kde=True, bins=30)\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs for the companies')\nplt.legend(title='Company')\nplt.show()\n\nValueError: Could not interpret value `Companies` for `x`. An entry with this name does not appear in `data`.\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 20 + ['B'] * 80,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Company', hue='Company', kde=True, bins=30) # Corrected variable name\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nComparing the companies and their values:\nThe goal of the project was to compare the companies strengths and weaknesses while using business tools such as the income and balance statement.\nAccountants use the balance sheet, income statement and many other financial aspects as shown in these data frames that were scraped. We got a chance to see some statistics based on these sorters for finance professionals.\nThe sources that were used were chat GDP and I\n\nAlso, I worked with Nada on this project."
  },
  {
    "objectID": "danl_210_project.html",
    "href": "danl_210_project.html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "Historical Stock\n\n# !pip install google-colab\nimport pandas as pd\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\n\n\nurl = \"https://jca100.github.io/yfinance_history.csv\"\nhistory = pd.read_csv(url)\n\n\nhistory\n\nWarning: total number of rows (197796) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\nDate\nTicker\nClose\nDividends\nHigh\nLow\nOpen\nStock Splits\nVolume\n\n\n\n\n0\n2023-01-03\nA\n148.716080\n0.0\n151.778826\n147.159941\n150.619151\n0.0\n1414300\n\n\n1\n2023-01-03\nAA\n43.895847\n0.0\n45.953769\n43.757993\n45.067583\n0.0\n2880000\n\n\n2\n2023-01-03\nAAL\n12.740000\n0.0\n13.000000\n12.530000\n12.910000\n0.0\n21865100\n\n\n3\n2023-01-03\nAAP\n147.327972\n0.0\n147.444647\n141.941962\n142.097518\n0.0\n1307400\n\n\n4\n2023-01-03\nAAPL\n124.048042\n0.0\n129.830399\n123.155395\n129.215470\n0.0\n112117500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n197791\n2024-03-28\nXYL\n129.240005\n0.0\n130.220001\n129.149994\n129.559998\n0.0\n953200\n\n\n197792\n2024-03-28\nYUM\n138.649994\n0.0\n138.830002\n137.389999\n137.389999\n0.0\n1770900\n\n\n197793\n2024-03-28\nZ\n48.779999\n0.0\n50.730000\n48.700001\n50.169998\n0.0\n4895700\n\n\n197794\n2024-03-28\nZBH\n131.979996\n0.0\n133.899994\n131.600006\n132.929993\n0.0\n1425300\n\n\n197795\n2024-03-28\nZTS\n168.728912\n0.0\n170.653418\n166.934027\n168.250266\n0.0\n3395600\n\n\n\n\n\n197796 rows × 9 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nurl = \"https://jca100.github.io/yfinance_balance_sheet.csv\"\nbalance = pd.read_csv(url)\n\n\nbalance\n\nWarning: Total number of columns (144) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nOrdinary Shares Number\nShare Issued\nNet Debt\nTotal Debt\nTangible Book Value\nInvested Capital\nWorking Capital\nNet Tangible Assets\n...\nTrading Securities\nInvestmentsin Subsidiariesat Cost\nTotal Partnership Capital\nLimited Partnership Capital\nDueto Related Parties Non Current\nDuefrom Related Parties Non Current\nFixed Assets Revaluation Reserve\nCurrent Deferred Taxes Liabilities\nCurrent Deferred Taxes Assets\nGeneral Partnership Capital\n\n\n\n\n0\nA\n2024-01-31\n293041817.0\n293041817.0\n8.070000e+08\n2.555000e+09\n1.778000e+09\n8.743000e+09\n2.721000e+09\n1.778000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n292123241.0\n292123241.0\n1.145000e+09\n2.735000e+09\n1.410000e+09\n8.580000e+09\n2.583000e+09\n1.410000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n292747000.0\n292747000.0\n1.460000e+09\n2.789000e+09\n1.072000e+09\n8.347000e+09\n2.270000e+09\n1.072000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n295000000.0\n295000000.0\n1.558000e+09\n2.733000e+09\n9.800000e+08\n8.514000e+09\n2.283000e+09\n9.800000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n178472464.0\n178472464.0\n1.190000e+09\n2.548000e+09\n3.812000e+09\n6.542000e+09\n1.840000e+09\n3.812000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3070\nZTS\n2024-03-31\n456947205.0\n501891243.0\n4.613000e+09\n6.770000e+09\n1.004000e+09\n1.164400e+10\n4.450000e+09\n1.004000e+09\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3071\nZTS\n2023-12-31\n458367358.0\n501891243.0\n4.528000e+09\n6.755000e+09\n9.000000e+08\n1.156400e+10\n4.454000e+09\n9.000000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3072\nZTS\n2023-09-30\n459524713.0\n501891243.0\n4.803000e+09\n6.745000e+09\n9.180000e+08\n1.163200e+10\n4.614000e+09\n9.180000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3073\nZTS\n2023-06-30\n460750652.0\n501891243.0\n4.843000e+09\n6.745000e+09\n6.590000e+08\n1.118200e+10\n4.414000e+09\n6.590000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3074\nZTS\n2023-03-31\n462495343.0\n501891243.0\n4.457000e+09\n6.742000e+09\n4.420000e+08\n1.105600e+10\n4.354000e+09\n4.420000e+08\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3075 rows × 144 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\nurl = \"https://jca100.github.io/yfinance_income_stmt.csv\"\nincome = pd.read_csv(url)\n\n\nincome\n\nWarning: Total number of columns (77) exceeds max_columns (20). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\ncompany_name\ndate\nTax Effect Of Unusual Items\nTax Rate For Calcs\nNormalized EBITDA\nNet Income From Continuing Operation Net Minority Interest\nReconciled Depreciation\nReconciled Cost Of Revenue\nEBITDA\nEBIT\n...\nSalaries And Wages\nTotal Other Finance Cost\nOther Taxes\nProvision For Doubtful Accounts\nDepreciation Income Statement\nInsurance And Claims\nRent And Landing Fees\nExcise Taxes\nDepletion Income Statement\nSecurities Amortization\n\n\n\n\n0\nA\n2024-01-31\n0.000000e+00\n0.136000\n487000000.0\n348000000.0\n62000000.0\n7.500000e+08\n4.870000e+08\n425000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nA\n2023-10-31\n0.000000e+00\n0.210000\n504000000.0\n475000000.0\n62000000.0\n7.730000e+08\n5.040000e+08\n442000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nA\n2023-07-31\n0.000000e+00\n0.159000\n227000000.0\n111000000.0\n71000000.0\n1.014000e+09\n2.270000e+08\n156000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nA\n2023-04-30\n0.000000e+00\n0.199000\n472000000.0\n302000000.0\n71000000.0\n7.930000e+08\n4.720000e+08\n401000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAA\n2024-03-31\n-1.340308e+07\n0.055385\n105000000.0\n-252000000.0\n161000000.0\n2.404000e+09\n-1.370000e+08\n-298000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3085\nZTS\n2024-03-31\n-4.554000e+06\n0.198000\n954000000.0\n599000000.0\n126000000.0\n5.540000e+08\n9.310000e+08\n805000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3086\nZTS\n2023-12-31\n-6.252308e+06\n0.195385\n867000000.0\n525000000.0\n126000000.0\n6.390000e+08\n8.350000e+08\n709000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3087\nZTS\n2023-09-30\n-7.098000e+06\n0.169000\n942000000.0\n596000000.0\n124000000.0\n5.520000e+08\n9.000000e+08\n776000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3088\nZTS\n2023-06-30\n1.624000e+07\n0.232000\n981000000.0\n671000000.0\n121000000.0\n5.230000e+08\n1.051000e+09\n930000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3089\nZTS\n2023-03-31\n-6.270000e+06\n0.209000\n910000000.0\n552000000.0\n120000000.0\n5.050000e+08\n8.800000e+08\n760000000.0\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n3090 rows × 77 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWhat is the net income from continuing operation net minority Interest for each company in yfinance history?\n\nprint(history.columns)\n\nIndex(['Date', 'Ticker', 'Close', 'Dividends', 'High', 'Low', 'Open',\n       'Stock Splits', 'Volume'],\n      dtype='object')\n\n\n\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Standardized_Close', hue='Company', kde=True, bins=30)\nplt.title('New minority interest for Finance History')\nplt.xlabel('Standardized Close Price')\nplt.ylabel('Frequency')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nHow does issues shared vary by company for the yfinance balance sheet\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\n\nfirst_close = df.groupby('Company')['Close'].transform('first')\ndf['Close_Relative_First'] = df['Close'] / first_close\n\nplt.figure(figsize=(10, 6))\nsns.lineplot(data=df, x='Company', y='Close_Relative_First', hue='Company') # Corrected function name\nplt.title('Daily Trend of Close Price Relative to First Date by Company')\nplt.xlabel('Company')\nplt.ylabel('Interest')\nplt.legend(title='Company')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\nHow does the recocnciled cost of revenue vary by each company in the yfinance income statement (stock market or how the income statement and balance sheet leads to promonents)\n\nadam plot or mb plot\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 50 + ['B'] * 50,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Companies', hue='Company', kde=True, bins=30)\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()\n\nValueError: Could not interpret value `Companies` for `x`. An entry with this name does not appear in `data`.\n\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n    'Date': pd.date_range(start='2024-01-01', periods=100),\n    'Company': ['A'] * 20 + ['B'] * 80,\n    'Close': [100.0 + i for i in range(50)] + [200.0 + i for i in range(50)]\n}\ndf = pd.DataFrame(data)\n\nmean_close = df.groupby('Company')['Close'].mean()\nstd_close = df.groupby('Company')['Close'].std()\n\ndf['Standardized_Close'] = (df['Close'] - df['Company'].map(mean_close)) / df['Company'].map(std_close)\n\nplt.figure(figsize=(10, 6))\nsns.histplot(data=df, x='Company', hue='Company', kde=True, bins=30) # Corrected variable name\nplt.title('Distribution of Standardized Daily Close Price by Company')\nplt.xlabel('Company')\nplt.ylabel('Reconciled costs')\nplt.legend(title='Company')\nplt.show()\n\n\n\n\nComparing the companies and their values,\nthere is an increse in the history and an increase in numbers in the balance sheet as the increase in the reputation and years for the company that it has."
  },
  {
    "objectID": "data200-hw5-Jordan-Alfano.html",
    "href": "data200-hw5-Jordan-Alfano.html",
    "title": "danl200-hw5-alfano-jordan",
    "section": "",
    "text": "[https://github.com/jca100/jca100.github.io(https://github.com/jca100/jca100.github.io)\nDANL 200: Homework Assignment 5 PUBLISHED December 4, 2023\nSubmit the danl200-hw5-YOUR_LAST_NAME-YOUR_FIRST_NAME.qmd file to Brightspace for Q1a and Question 2 in Homework Assignment 5. Rendering the file, danl200-hw5-YOUR_LAST_NAME-YOUR_FIRST_NAME.qmd, should not give any errors. Due is December 11, 11:59 P.M.\nQuestion 1. Personal Website on GitHub Q1a. Provide a link for your GihtHub repository, https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_USERNAME.github.io\nhttps://github.com/jca100/jca100.github.io\nAdd a URL for your website (https://YOUR_GITHUB_USERNAME.github.io/) in the About section in your GihtHub repository webpage by clicking the setting. For example, the below shows the :\nQ1b. Make sure that your GitHub repository, named YOUR_GITHUB_USERNAME.github.io, is set to public.\nUpdate your website at https://YOUR_GITHUB_USERNAME.github.io/index.html to:\nInclude links to (1) your LinkedIn page, (2) GitHub page (https://github.com/YOUR_GITHUB_USERNAME), and (3) a PDF file of your Rèsume (https://YOUR_GITHUB_USERNAME.github.io/YOUR_RESUME.pdf). Offer a description of yourself, detailing your education background and professional experience. Display your own profile picture with your face, not the one shown below.\nQ1c. Change the title of your blog.\nThat is, to replace Insightful Analytics with your own blog name. Remove the blog posts Post With Code, Starwars, and Beer Markets.\nRevise the Welcome To My Blog post.\nPost three different blog articles based on data analysis using the following three CSV files:\nhttps://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv https://bcdanl.github.io/data/spotify_all.csv https://bcdanl.github.io/data/beer_markets.csv\nMake sure that each blog post has categories and is associated with a proper image file that is displayed as a thumbnail at the list page of the blog. Make sure that each blog post uses emojis properly. (E.g., 😄 🍺 🎶 🍕)\nMake sure that each blog post includes its thumbnail image and at least three ggplot figures. You can refer to the previous DANL 200 Homework Assignments and Exams for your blog posts.\nQuestion 2.\nNFL in 2022 Add a blog post with your answers for Question 2 to your website (https://YOUR_GITHUB_USERNAME.github.io/).\nMake sure that your blog post for Question 2 includes all the questionnaires and your answers to them. Make sure that your blog post for Question 2 has a section for each sub-question (e.g., Q2a, Q2b) in Question 2, so that the Table of Contents display the section for each questionnaire.\nThe following is the data.frame for Question 2. NFL2022_stuffs &lt;- read_csv(‘https://bcdanl.github.io/data/NFL2022_stuffs.csv’)\nplay_id  game_id  drive  week  posteam  qtr  down  half_seconds_remaining  pass  wp  1 2022_01_BAL_NYJ NA 1 NA 1 NA 1800 0 5.462618e-01 43 2022_01_BAL_NYJ 1 1 NYJ 1 NA 1800 0 5.462618e-01 68 2022_01_BAL_NYJ 1 1 NYJ 1 1 1796 0 5.469690e-01 89 2022_01_BAL_NYJ 1 1 NYJ 1 1 1769 1 5.725734e-01 115 2022_01_BAL_NYJ 1 1 NYJ 1 2 1765 0 5.545366e-01 136 2022_01_BAL_NYJ 1 1 NYJ 1 3 1741 1 5.401673e-01 172 2022_01_BAL_NYJ 1 1 NYJ 1 4 1733 0 4.880532e-01 202 2022_01_BAL_NYJ 2 1 BAL 1 1 1722 1 4.958201e-01 230 2022_01_BAL_NYJ 2 1 BAL 1 2 1701 1 4.965942e-01 254 2022_01_BAL_NYJ 2 1 BAL 1 3 1661 0 4.987317e-01 … 1-10 of 10,000 rows NFL2022_stuffs is the data.frame that contains information about NFL games in year 2022, in which the unit of observation is a single play for each drive in a NFL game. Variable description play_id: Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play game_id: Ten digit identifier for NFL game. drive: Numeric drive number in the game. week: Season week. posteam: String abbreviation for the team with possession. qtr: Quarter of the game (5 is overtime). half_seconds_remaining: Numeric seconds remaining in the half. down: The down for the given play. Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with it or passing it). If you make 10 yards then you get another set of four downs. pass: Binary indicator if the play was a pass play. wp: Estimated winning probability for the posteam given the current situation at the start of the given play.\nQ2a. In data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\nAnswer: # Assuming NFL2022_stuffs is your data frame\nNFL2022_stuffs &lt;- na.omit(NFL2022_stuffs[, !is.na(NFL2022_stuffs$posteam)])\nQ2b. Summarize the mean value of pass for each posteam when all the following conditions hold: wp is greater than 20% and less than 75%; down is less than or equal to 2; and half_seconds_remaining is greater than 120.\nAnswer:\nlibrary(dplyr)\nresult &lt;- NFL2022_stuffs %&gt;%\nfilter(wp &gt; 0.20 & wp &lt; 0.75 & down &lt;= 2 & half_seconds_remaining &gt; 120) %&gt;%\ngroup_by(posteam) %&gt;%\nsummarize(mean_pass = mean(pass, na.rm = TRUE))\nQ2c. Provide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comments to describe the mean value of pass for each posteam. In the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\nAnswer:\nlibrary(ggplot2)\nresult$posteam &lt;- factor(result$posteam, levels = result$posteam[order(result$mean_pass)])\nggplot(result, aes(x = posteam, y = mean_pass)) +\ngeom_point() +\nlabs(title = “Mean Value of pass for each posteam”,\nx = “Posteam”,\ny = “Mean Pass Value”)\nQ2d. Consider the following data.frame, NFL2022_epa: NFL2022_epa &lt;- read_csv(‘https://bcdanl.github.io/data/NFL2022_epa.csv’)\nCreate the data.frame, NFL2022_stuffs_EPA, that includes\nAll the variables in the data.frame, NFL2022_stuffs; The variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames. In the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\nAnswer:\nlibrary(dplyr)\nNFL2022_stuffs_EPA &lt;- inner_join(NFL2022_stuffs, NFL2022_epa[, c(“passer”, “receiver”, “epa”)], by = “passer”)\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs_EPA[complete.cases(NFL2022_stuffs_EPA$passer), ]\nQ2e. Provide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers, “J.Allen” “P.Mahomes”\nAnswer: library(ggplot2)\nggplot(NFL2022_stuffs_EPA, aes(x = week, y = epa, color = passer)) +\ngeom_line() +\ngeom_point() +\nlabs(title = “NFL Weekly Trend of Mean EPA for J.Allen and P.Mahomes”,\nx = “Week”,\ny = “Mean EPA”) +\ncolor(values = c(“J.Allen” = “blue”, “P.Mahomes” = “red”))\nQ2f. Calculate the difference between the mean value of epa for “J.Allen” the mean value of epa for “P.Mahomes” for each value of week.\nAnswer:\nlibrary(dplyr)\ngroup_by(week) %&gt;%\nsummarize(mean_epa_diff = mean(epa[passer == “J.Allen”], na.rm = TRUE) -\nmean(epa[passer == “P.Mahomes”], na.rm = TRUE))\nQ2g. Summarize the resulting data.frame in Q2d, with the following four variables:\nposteam: String abbreviation for the team with possession. passer: Name of the player who passed a ball to a receiver by initially taking a three-step drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.) mean_epa: Mean value of epa in 2022 for each passer n_pass: Number of observations for each passer Then find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that n_pass must be greater than or equal to the third quantile level of n_pass.\nAnswer:\nlibrary(dplyr)\nsummary_data &lt;- NFL2022_stuffs_EPA %&gt;%\ngroup_by(posteam, passer) %&gt;%\nsummarize(mean_epa = mean(epa, na.rm = TRUE),\nn_pass = n())\nquantile_threshold &lt;- quantile(summary_data$n_pass, 0.75)\ntop_passers &lt;- summary_data %&gt;%\nfilter(n_pass &gt;= quantile_threshold) %&gt;%\ntop_n(10, wt = mean_epa)\ntop_passers"
  },
  {
    "objectID": "Habbits.html",
    "href": "Habbits.html",
    "title": "Habbts",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Habbits.html#quarto",
    "href": "Habbits.html#quarto",
    "title": "Habbts",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "Habbits.html#running-code",
    "href": "Habbits.html#running-code",
    "title": "Habbts",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jordan Alfano",
    "section": "",
    "text": "I am a Sophomore candidate for a Bachelors in Data Analytics at SUNY Geneseo. I enjoy going to the gym on my free time. When I am not doing work or have to taken on a multitude of responsibilities, my time is spent with my family and friends."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jordan Alfano",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Aug 2022 - May 2026"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jordan Alfano",
    "section": "Experience",
    "text": "Experience\nAccenture Data Analyst Virtual Internship, Peer mentor at the Career Design Center and RA for Reslife"
  },
  {
    "objectID": "posts/beer-markets/beermarkets.html",
    "href": "posts/beer-markets/beermarkets.html",
    "title": "Beer Markets",
    "section": "",
    "text": "Let’s analyze the beer_data data:\n\nbeer_data &lt;- read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")\n\nrmarkdown::paged_table(beer_data)"
  },
  {
    "objectID": "posts/py-basics/basic_python_intro_blog.html",
    "href": "posts/py-basics/basic_python_intro_blog.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/py-basics/basic_python_intro_blog.html#what-is-python",
    "href": "posts/py-basics/basic_python_intro_blog.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')"
  },
  {
    "objectID": "posts/py-basics/basic_python_intro_blog.html#variables-and-data-types",
    "href": "posts/py-basics/basic_python_intro_blog.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/py-basics/basic_python_intro_blog.html#control-structures",
    "href": "posts/py-basics/basic_python_intro_blog.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "posts/py-basics/basic_python_intro_blog.html#functions",
    "href": "posts/py-basics/basic_python_intro_blog.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "posts/py-basics/basic_python_intro_blog.html#lists-and-dictionaries",
    "href": "posts/py-basics/basic_python_intro_blog.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/restaurant/restaurants.html",
    "href": "posts/restaurant/restaurants.html",
    "title": "Restaurants",
    "section": "",
    "text": "Let’s analyze the res data:\n\nres &lt;- read_csv(\"https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv\")\n\nrmarkdown::paged_table(res)"
  },
  {
    "objectID": "posts/spotifyall/index.html",
    "href": "posts/spotifyall/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "Introduction: This project matters because it affected the rate at which people are contracting and healing from the COVID 19 virus at a daily rate. There is a greater amount of people who are recovering compared to the people who are dying.\nData Summary: Our data visualization entails how both death and recovered are increasing at an exponential rate. This provides the assumption that while many may be dying there are more people recovering. In the real world this provides hope for those who are suffering from the virus..\nThis is our R set up. In order to demo certain data we need to go into our library and import the packages we will need order to proceed with this project. The example our case is demonstrated below.\nWe need to assign a name to the data frame that we will be using and copy the path name of the github repository that we will be using in this project. Jocelyn’s repository is exemplified below.\nday_wise &lt;- read_csv('https://jem10126.github.io/day_wise.csv')\nnvars &lt;- format(round(ncol(day_wise), 0), \n                nsmall=0, \n                big.mark=\",\") \nnobs &lt;- format(round(nrow(day_wise), 0), \n                nsmall=0, \n                big.mark=\",\")\nHere is the paged table using rmarkdown::paged_table() with the results = 'asis' chunk option.\nrmarkdown::paged_table(day_wise)\nData Visualization: We created a ggplot figure in order for us to see exactly how the relationship between amount of deaths and recoveries intertwinds with one another. My group and I decided that a line plot would be of best fit because line plots are useful to track changes over short and long periods of time.\nday_wise %&gt;% \n  ggplot(aes(x = log(Deaths), \n             y = log(Recovered))) + \n  geom_point(alpha = .1, color = 'purple') +\n  geom_smooth(method = lm, se = F) +\n  theme_bw() +\n  theme(legend.position = 'top')\nData Transformation: We used the group by function here in order to group rows that have the same values into summary rows, which then allows us to use the function summary, in order to summarize the statistics provided.\nday_wise &lt;- day_wise %&gt;% \n  group_by(Deaths, Recovered) %&gt;% \n  summarise(Recovered_tot = sum(Recovered, na.rm = T),\n            Deaths_mean = round(mean(Deaths, na.rm = T), 2),\n            .groups = \"drop\")"
  },
  {
    "objectID": "project.html#analysis",
    "href": "project.html#analysis",
    "title": "DANL Project",
    "section": "0.1 Analysis",
    "text": "0.1 Analysis\nAs seen across the world, so many people were pessimistic about the pandemic. Including my group members and I. In the end, there were more people who were saved and beat the virus compared to the unfortunate ones who did not make it. There is no doubt that the world has been changed but it is relevant to know that there were more people being helped and cured compared to the amount of people that were dying because of this deadly pandemic."
  },
  {
    "objectID": "quarto-template (2).html",
    "href": "quarto-template (2).html",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "",
    "text": "day_wise &lt;- read_csv('https://jem10126.github.io/day_wise.csv')\nnvars &lt;- format(round(ncol(day_wise), 0), \n                nsmall=0, \n                big.mark=\",\") \nnobs &lt;- format(round(nrow(day_wise), 0), \n                nsmall=0, \n                big.mark=\",\")\nThe number of variables is 12; the number of observations is 188."
  },
  {
    "objectID": "quarto-template (2).html#data-visualization",
    "href": "quarto-template (2).html#data-visualization",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "1.1 Data Visualization",
    "text": "1.1 Data Visualization\n\nday_wise %&gt;% \n  ggplot(aes(x = log(Deaths), \n             y = log(Recovered))) + \n  geom_point(alpha = .1, color = 'purple') +\n  geom_smooth(method = lm, se = F) +\n  theme_bw() +\n  theme(legend.position = 'top')\n\n\n\n\n\n(skimr::skim(day_wise))\n\n\nData summary\n\n\nName\nday_wise\n\n\nNumber of rows\n188\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nDate\n1\n\n\nnumeric\n11\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nDate\n0\n1\n2020-01-22\n2020-07-27\n2020-04-24\n188\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nConfirmed\n0\n1\n4406960.01\n4757988.32\n555.00\n112191.00\n2848733.00\n7422045.50\n16480485.00\n▇▃▂▂▁\n\n\nDeaths\n0\n1\n230770.76\n217929.09\n17.00\n3935.00\n204190.00\n418634.50\n654036.00\n▇▂▃▃▂\n\n\nRecovered\n0\n1\n2066001.22\n2627976.39\n28.00\n60441.25\n784784.00\n3416395.75\n9468087.00\n▇▂▁▁▁\n\n\nActive\n0\n1\n2110188.03\n1969670.45\n510.00\n58641.75\n1859759.00\n3587015.25\n6358362.00\n▇▃▃▂▂\n\n\nNew cases\n0\n1\n87771.02\n75295.29\n0.00\n5568.50\n81114.00\n131502.50\n282756.00\n▇▇▃▂▂\n\n\nNew deaths\n0\n1\n3478.82\n2537.74\n0.00\n250.75\n4116.00\n5346.00\n9966.00\n▇▃▇▃▁\n\n\nNew recovered\n0\n1\n50362.02\n56090.89\n0.00\n2488.25\n30991.50\n79706.25\n284394.00\n▇▂▂▁▁\n\n\nDeaths / 100 Cases\n0\n1\n4.86\n1.58\n2.04\n3.51\n4.85\n6.30\n7.18\n▅▅▆▅▇\n\n\nRecovered / 100 Cases\n0\n1\n34.34\n16.21\n1.71\n22.78\n35.68\n48.95\n57.45\n▃▃▆▅▇\n\n\nDeaths / 100 Recovered\n0\n1\n22.10\n22.57\n6.26\n9.65\n15.38\n25.34\n134.43\n▇▁▁▁▁\n\n\nNo. of countries\n0\n1\n144.35\n65.18\n6.00\n101.25\n184.00\n187.00\n187.00\n▂▁▁▁▇"
  },
  {
    "objectID": "quarto-template (2).html#data-transformation",
    "href": "quarto-template (2).html#data-transformation",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "1.2 Data Transformation",
    "text": "1.2 Data Transformation\n\nday_wise &lt;- day_wise %&gt;% \n  group_by(Deaths, Recovered) %&gt;% \n  summarise(Recovered_tot = sum(Recovered, na.rm = T),\n            Deaths_mean = round(mean(Deaths, na.rm = T), 2),\n            .groups = \"drop\")"
  },
  {
    "objectID": "quarto-template.html",
    "href": "quarto-template.html",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "",
    "text": "ggplot(diamonds, aes(carat, price)) + \n  geom_hex()\n\n\n\nggsave(\"diamonds.png\") # to save ggplot as a png file.\nwrite_csv(diamonds, \"diamonds.csv\") # to save data.frame as a csv file\noj &lt;- read_csv('https://bcdanl.github.io/data/dominick_oj.csv')\nnvars &lt;- format(round(ncol(oj), 0), \n                nsmall=0, \n                big.mark=\",\") \nnobs &lt;- format(round(nrow(oj), 0), \n                nsmall=0, \n                big.mark=\",\")\nThe number of variables is 4; the number of observations is 28,947.\nRoses are red\nviolets are blue."
  },
  {
    "objectID": "quarto-template.html#data-summary",
    "href": "quarto-template.html#data-summary",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.1 Data Summary",
    "text": "2.1 Data Summary\n\nSummary statistics (Use skimr::skim())"
  },
  {
    "objectID": "quarto-template.html#data-visualization",
    "href": "quarto-template.html#data-visualization",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.2 Data Visualization",
    "text": "2.2 Data Visualization\n\noj %&gt;% \n  ggplot(aes(x = log(sales), \n             y = log(price),\n             color = brand)) +\n  geom_point(alpha = .1) +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(.~ad) +\n  theme_bw() +\n  theme(legend.position = 'top')"
  },
  {
    "objectID": "quarto-template.html#data-transformation",
    "href": "quarto-template.html#data-transformation",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.3 Data Transformation",
    "text": "2.3 Data Transformation\n\nob_sum1 &lt;- oj %&gt;% \n  group_by(brand, ad) %&gt;% \n  summarise(sales_tot = sum(sales, na.rm = T),\n            price_mean = round(mean(price, na.rm = T), 2))"
  },
  {
    "objectID": "quarto-template.html#analysis",
    "href": "quarto-template.html#analysis",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis"
  },
  {
    "objectID": "quarto-template.html#quotes",
    "href": "quarto-template.html#quotes",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.5 Quotes",
    "text": "2.5 Quotes\n\nQuote with &gt;\n\n\n“The truth is rarely pure and never simple.”\n— Oscar Wilde"
  },
  {
    "objectID": "quarto-template.html#inserting-figures",
    "href": "quarto-template.html#inserting-figures",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.6 Inserting Figures",
    "text": "2.6 Inserting Figures\nFor a demonstration of a DANL tiger, see Figure 1.\n\n\n\n\n\nFigure 1: DANL Tiger"
  },
  {
    "objectID": "quarto-template.html#inserting-a-html-page",
    "href": "quarto-template.html#inserting-a-html-page",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.7 Inserting a HTML page",
    "text": "2.7 Inserting a HTML page"
  },
  {
    "objectID": "spotifyall.html",
    "href": "spotifyall.html",
    "title": "spotifyall",
    "section": "",
    "text": "---\ntitle: “spotifyall”\nauthor: “Jordan Alfano”\ndate: “2023-12-08”\ncategories: [spotifyall, code, analysis]\nimage: “image.png”\nexecute:\nwarning: false\nmessage: false\ntoc: true\n---\n```{r}\n#| include: false\nlibrary(knitr)\nlibrary(rmarkdown)\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\ntheme_set(theme_ipsum()+\ntheme(strip.background =element_rect(fill=“lightgray”),\naxis.title.x = element_text(angle = 0,\nsize = rel(1.5),\nmargin = margin(10,0,0,0)),\naxis.title.y = element_text(angle = 0,\nsize = rel(1.5),\nmargin = margin(0,10,0,0))\n)\n)\n``\nLet’s analyze the `spotifyall` data:\n```{r}\nspotifyall&lt;- read_csv(https://bcdanl.github.io/data/spotify_all.csv)\n```\n```{r}\n#| results: asis\nrmarkdown::paged_table(spotifyall)\n```"
  },
  {
    "objectID": "untitled.html",
    "href": "untitled.html",
    "title": "Classwork_10",
    "section": "",
    "text": "billboard &lt;- read_csv(‘https://bcdanl.github.io/data/billboard.csv’)\nQ1a.) Describe how the distribution of rating varies across week 1, week 2, and week 3 using the faceted histogram.\nQ1b.) Which artist(s) have the most number of tracks in billboard data.frame?\nDo not double-count an artist’s tracks if they appear in multiple weeks.\nQuestion 2 - Average Personal Income in NY Counties The following data is for Question 2:\nny_pincp &lt;- read_csv(‘https://bcdanl.github.io/data/NY_pinc_wide.csv’)\nQ2a Make ny_pincp longer.\nQ2b Provide both (1) ggplot code and (2) a simple comment to describe how overall the yearly trend of NY counties’ average personal incomes are.\nQuestion 3 - COVID-19 Cases The following data is for Question 3:\ncovid &lt;- read_csv(‘https://bcdanl.github.io/data/covid19_cases.csv’)\nQ3a Keep only the following three variables, date, countriesAndTerritories, and cases.\nThen make a wide-form data.frame of covid whose variable names are from countriesAndTerritories and values are from cases.\nThen drop the variable date.\nQ3b Use the wide-form data.frame of covid to find the top 10 countries in terms of the correlation between their cases and the USA case. Use cor(data.frame), which returns a matrix. Then convert it to data.frame using as.data.frame(matrix) —"
  }
]